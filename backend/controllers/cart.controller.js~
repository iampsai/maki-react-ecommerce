import Product from "../models/product.model.js";

export const getCart = async (req, res) => {
  try {
    const products = await Product.find({_id: {$in: req.user.cartItems}});

    const cartItems = products.map((product) => {
      const item = req.user.cartItems.find((cartItem) => cartItem.id === product.id);
      return {
        ...product.toJSON(),
        quantity: item.quantity
      }
    });

    res.status(200).json(cartItems);
  } catch (error) {
    console.error("Error getting cart:", error);
    res.status(500).json({message: "Failed to retrieve cart item", error: error.message});
  }
}

export const addToCart = async (req, res) => {
  try {
    const {productId} = req.body;
    const user = req.user;

    if (!user) {
      return res.status(401).json({message: "Unauthorized"});
    }

    const existingItem = user.cartItems.find((item) => item.id === productId);

    if (existingItem) {
      existingItem.quantity += 1;
    } else {
      user.cartItems.push(productId);
    }

    await user.save();

    res.status(200).json(user.cartItems);
  } catch (error) {
    console.error("Error adding item to cart:", error);
    res.status(500).json({message: "Error adding item to cart", error: error.message});
  }
}

export const removeAllFromCart = async (req, res) => {
  try {
    const {productId} = req.body;
    const user = req.user;

    if (!user) {
      return res.status(401).json({message: "Unauthorized"});
    }

    if (!productId) {
      user.cartItems = [];
    } else {
      user.cartItems = user.cartItems.filter((item) => item.id !== productId);
    }

    await user.save();

    res.status(200).json(user.cartItems)
  } catch (error) {
    console.error("Error clearing cart:", error);
    res.status(500).json({message: "Error clearing cart", error: error.message});
  }
}

export const updateCart = async (req, res) => {
  try {
    const {id: productId} = req.params;
    const {quantity} = req.body;
    const user = req.user;
    const existingItem = user.cartItems.find((item) => item.id === productId);

    if (existingItem) {
      if (quantity === 0) {
        user.cartItems = user.cartItems.filter((item) => item.id !== productId);
      } else {
        existingItem.quantity = quantity;
      }
      await user.save();
      res.status(200).json({cart: user.cart, message: "Cart updated"});
    } else {
      res.status(404).json({message: "Item not found in cart"});
    }
  } catch (error) {
    console.error("Error updating cart:", error);
    res.status(500).json({message: "Error updating cart", error: error.message});
  }
}